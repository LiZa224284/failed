/home/xlx9645/miniconda3/envs/maze/lib/python3.9/site-packages/gymnasium/envs/registration.py:642: UserWarning: [33mWARN: Overriding environment TrapMazeEnv already in registry.[0m
  logger.warn(f"Overriding environment {new_spec.id} already in registry.")
wandb: Using wandb-core as the SDK backend.  Please refer to https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: yuxuanli2023 (yuxuanli2023-northwestern-university). Use `wandb login --relogin` to force relogin
wandb: Tracking run with wandb version 0.19.1
wandb: Run data is saved locally in /home/xlx9645/failed/Maze/update_baselines/wandb/run-20241229_185031-vvlddqqd
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run AIRL_on
wandb: ‚≠êÔ∏è View project at https://wandb.ai/yuxuanli2023-northwestern-university/Main_1229
wandb: üöÄ View run at https://wandb.ai/yuxuanli2023-northwestern-university/Main_1229/runs/vvlddqqd
/home/xlx9645/miniconda3/envs/maze/lib/python3.9/site-packages/gymnasium/spaces/box.py:235: UserWarning: [33mWARN: Box low's precision lowered by casting to float32, current low.dtype=float64[0m
  gym.logger.warn(
/home/xlx9645/miniconda3/envs/maze/lib/python3.9/site-packages/gymnasium/spaces/box.py:305: UserWarning: [33mWARN: Box high's precision lowered by casting to float32, current high.dtype=float64[0m
  gym.logger.warn(
/home/xlx9645/miniconda3/envs/maze/lib/python3.9/site-packages/torch/optim/lr_scheduler.py:224: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  warnings.warn(
/home/xlx9645/failed/Maze/update_baselines/Main_AIRL2.py:89: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  reward_net.load_state_dict(torch.load(reward_net_path, map_location=device))
Traceback (most recent call last):
  File "/home/xlx9645/failed/Maze/update_baselines/Main_AIRL2.py", line 298, in <module>
    visualize_bcirl_reward_function(
  File "/home/xlx9645/failed/Maze/update_baselines/Main_AIRL2.py", line 110, in visualize_bcirl_reward_function
    rewards = compute_gail_reward(obs_tensor,actions_tensor)
  File "/home/xlx9645/failed/Maze/update_baselines/Main_AIRL2.py", line 47, in compute_gail_reward
    logits = discriminator(state, action)
  File "/home/xlx9645/miniconda3/envs/maze/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/xlx9645/miniconda3/envs/maze/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/xlx9645/failed/Maze/update_baselines/Main_AIRL2.py", line 71, in forward
    return self.net(x)
  File "/home/xlx9645/miniconda3/envs/maze/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/xlx9645/miniconda3/envs/maze/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/xlx9645/miniconda3/envs/maze/lib/python3.9/site-packages/torch/nn/modules/container.py", line 250, in forward
    input = module(input)
  File "/home/xlx9645/miniconda3/envs/maze/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/xlx9645/miniconda3/envs/maze/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/xlx9645/miniconda3/envs/maze/lib/python3.9/site-packages/torch/nn/modules/linear.py", line 125, in forward
    return F.linear(input, self.weight, self.bias)
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 20.00 MiB. GPU 2 has a total capacity of 47.50 GiB of which 6.56 MiB is free. Process 179311 has 538.00 MiB memory in use. Process 218413 has 538.00 MiB memory in use. Process 3944186 has 560.00 MiB memory in use. Process 3944184 has 560.00 MiB memory in use. Process 3944191 has 560.00 MiB memory in use. Process 3944185 has 560.00 MiB memory in use. Process 3944190 has 560.00 MiB memory in use. Process 3944189 has 560.00 MiB memory in use. Process 3944188 has 560.00 MiB memory in use. Process 3944193 has 560.00 MiB memory in use. Process 3944187 has 560.00 MiB memory in use. Process 4056750 has 37.04 GiB memory in use. Process 4115234 has 538.00 MiB memory in use. Including non-PyTorch memory, this process has 536.00 MiB memory in use. Process 4115239 has 126.00 MiB memory in use. Process 4115235 has 536.00 MiB memory in use. Process 4115241 has 460.00 MiB memory in use. Process 4115243 has 460.00 MiB memory in use. Process 4115242 has 526.00 MiB memory in use. Process 4115237 has 460.00 MiB memory in use. Process 4115238 has 426.00 MiB memory in use. Process 4115236 has 426.00 MiB memory in use. Of the allocated memory 20.23 MiB is allocated by PyTorch, and 5.77 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
[1;34mwandb[0m: üöÄ View run [33mAIRL_on[0m at: [34mhttps://wandb.ai/yuxuanli2023-northwestern-university/Main_1229/runs/vvlddqqd[0m
[1;34mwandb[0m: Find logs at: [1;35mwandb/run-20241229_185031-vvlddqqd/logs[0m
